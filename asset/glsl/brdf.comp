#version 460 core
#extension GL_KHR_vulkan_glsl : enable
#define PI 3.14159265
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, std140, binding = 0) uniform Params{
    int sample_count;
};

layout(set = 1, binding = 0) uniform sampler2D Emiu;
layout(set = 1, binding = 1) uniform sampler1D Eavg;
layout(set = 1, rgba32f, binding = 2) uniform writeonly image2D BRDF;

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness * roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float a = roughness;
    float k = (a * a) / 2.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

float distributionGGX(vec3 N, vec3 H, float roughness){
    float a = roughness * roughness;
    float a2 = a * a;
    float NdotH = max(dot(N,H),0.f);
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.f) + 1.f);
    denom = PI * denom * denom;

    return nom / denom;
}

vec3 integrateBRDF(float NdotV,float roughness){

    float scale = 0;
    float bias = 0;
    float fms = 0;

    vec3 wo = vec3(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);
    vec3 wn = vec3(0,0,1);
    float e_miu_o = texture(Emiu,vec2(NdotV,roughness)).r;
    for(int i = 0; i < sample_count; ++i){
        vec2 xi = hammersley(i, sample_count);
        vec3 wh = importanceSampleGGX(xi,wn,roughness);
        vec3 wi = normalize(2 * dot(wo,wh) * wh - wo);

        float NDF = distributionGGX(wn,wh,roughness);

        float NdotL = max(0, wi.z);
        float NdotH = max(0, wh.z);
        float LdotH = max(0, dot(wi,wh));
        float VdotH = max(0, dot(wo,wh));
        if(NdotL > 0){
            float G = geometrySmith(wn,wo,wi,roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float fc = pow(1.0 - VdotH, 5);

            scale += (1.0 - fc) * G_Vis;
            bias += fc * G_Vis;
            float e_miu_i = texture(Emiu,vec2(NdotL,roughness)).r;
            float e_avg = texture(Eavg,roughness).r;
            float f = (1.0 - e_miu_o) * (1.0 - e_miu_i) / (PI * (1.0 - e_avg));
            float f_add = 4 * f * NdotL * LdotH / (NdotH * NDF);
            if(f_add != 1.0 / 0.0)
                fms += f_add;
        }
    }
    scale /= sample_count;
    bias  /= sample_count;
    fms /= sample_count;
    return vec3(scale,bias,fms);
}
void main() {
    ivec2 g_index = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + gl_LocalInvocationID.xy);
    ivec2 res = imageSize(BRDF);
    if(g_index.x >= res.x || g_index.y >= res.y) return;
    float roughness = float(g_index.x + 0.5) / res.x;
    float NdotV = float(g_index.y + 0.5) / res.y;

    vec3 brdf = integrateBRDF(NdotV,roughness);
    imageStore(BRDF,g_index,vec4(brdf,0));
}
