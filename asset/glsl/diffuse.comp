#version 460 core
#extension GL_KHR_vulkan_glsl : enable
#define PI 3.14159265
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, std140, binding = 0) uniform Params{
    int sample_count;
};

layout(set = 1, binding = 0) uniform sampler2D EnvMap;

layout(set = 1,rgba32f, binding = 1) uniform writeonly image2D DiffuseEnvMap;

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 sampleEnvMap(vec3 dir){
    vec2 uv = vec2(atan(dir.z,dir.x),asin(dir.y));
    uv *= vec2(0.1591,0.3183);
    uv += 0.5;
    return texture(EnvMap,uv).rgb;
}
void main() {
    ivec2 g_index = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + gl_LocalInvocationID.xy);
    ivec2 res = imageSize(DiffuseEnvMap);
    if(g_index.x >= res.x || g_index.y >= res.y) return;

    vec2 uv = (g_index + 0.5) / res;
    float phi = uv.x * 2 * PI;
    float theta = uv.y * PI;

    vec3 local_z = vec3(sin(theta)*cos(phi), cos(theta), sin(theta)*sin(phi));
    vec3 local_y;
    if (abs(dot(local_z, vec3(1, 0, 0))) < 0.7)// approximate cos45
        local_y = cross(local_z, vec3(1, 0, 0));
    else
        local_y = cross(local_z, vec3(0, 1, 0));
    local_y = normalize(local_y);
    vec3 local_x = cross(local_y, local_z);

    vec3 light_sum = vec3(0);
    for(int i = 0; i < sample_count; ++i){
        vec2 rand = hammersley(i,sample_count);
        float sin_theta = sqrt(1 - rand.x);
        float phi = 2 * PI * rand.y;
        float cos_theta = sqrt(rand.x);
        vec3 local_dir = vec3(cos_theta * cos(phi), cos_theta * sin(phi), sin_theta);
        vec3 dir = local_dir.x * local_x + local_dir.y * local_y + local_dir.z * local_z;
        light_sum += sampleEnvMap(dir);
    }
    light_sum /= sample_count;
    imageStore(DiffuseEnvMap,g_index,vec4(light_sum,0));
}
